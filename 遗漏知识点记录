1.    数组 .find()方法

find() 方法返回通过测试（函数内判断）的数组的第一个元素的值。

find() 方法为数组中的每个元素都调用一次函数执行：

当数组中的元素在测试条件时返回 true 时, find() 返回符合条件的元素，之后的值不会再调用执行函数。
如果没有符合条件的元素返回 undefined
注意: find() 对于空数组，函数是不会执行的。

注意: find() 并没有改变数组的原始值。

举例子：
var ages = [3, 10, 18, 20];
 
function checkAdult(age) {
    return age >= 18;
}
 
ages.find(checkAdult);
返回18

2.   .some（） 
与.find()基本同理，但是返回的是true和false，如果如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。
如果都不满足就返回false

上面的例子： 
ages.some((ages)=>{
 return ages>18
 //返回true ，>20返回false
})



6.数组 .map（）方法

var numbers = [4, 9, 16, 25];

function myFunction() {
    x = document.getElementById("demo")
    x.innerHTML = numbers.map(Math.sqrt);
}
输出结果为:

2,3,4,5
map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。
map() 方法按照原始数组元素顺序依次处理元素。


7. 数组 .filter()
filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。
注意： filter() 不会对空数组进行检测。
注意： filter() 不会改变原始数组。

举例子：
var ages = [32, 33, 16, 40];

function checkAdult(age) {
    return age >= 18;
}

function myFunction() {
    document.getElementById("demo").innerHTML = ages.filter(checkAdult);
}
输出结果为:

32,33,40


3.要去补充的知识点：可枚举属性！



4.$router与$route
$router 的作用是进行路由跳转的！就像jQuery里的window.location一样，起到的是导航的作用。
举个栗子：
$router.go(-1)，那么它就会从当前页面跳转到-1这个页面！

$route获取路由信息的一个对象
$route.path
字符串，等于当前路由对象的路径，会被解析为绝对路径，如 “/shops/goods” 。
$route.params
对象，包含路由中的动态片段和全匹配片段的键值对 。
$route.query
对象，包含路由中查询参数的键值对。例如，对于 /home/news/detail/01?favorite=yes ，会得到$route.query.favorite == ‘yes’ 。
$route.router
路由规则所属的路由器（以及其所属的组件）。
$route.matched
数组，包含当前匹配的路径中所包含的所有片段所对应的配置参数对象。
$route.name
当前路径的名字，如果没有使用具名路径，则名字为空。
所以我们可以通过$route.来获取到路由里的这些信息为自己所用。


5.什么是vuex?
核心：store，可以算是一个容器，基本上包含应用中的大部分状态（state）
vuex就是一个专门用来管理vue组件之间进行通信的一个管理工具，也就是一个全局管理工具，
比如你在state中定义了一个属性，那么你就可以在所用的组件中来获取和修改这个值并且你的修改可以被全局响应变更。
Vuex与全局对象的区别:
.1 Vuex的状态存储是响应式的，Vue组件从store中读取状态的时候，如果store中的状态发生改变，相应组件也会得到高效更新。
.2 不能直接改变store中的状态，想要改变必须要显示提交commit改变mutation，方便跟踪每一个状态的变化。
在全局：可以通过 store.state来获取对象，通过store.commit方法触发状态变更。
在组件中， 访问 this.$store 属性，需要为Vue实例提供创建好的store


Vuex的5大主要内容：
·store ：见上所述
Vue.use(Vuex); // 安装 Vuex 插件  
const store=new Vuex.Store({actions,getters, state,mutations})
main.js里面引入store，然后再全局注入一下，这样一来就可以在任何一个组件里面使用this.$store了：
·1state：
const state={  //要设置的全局访问的对象
    showIt：ture，count：0 
    //要设置的初始属性值}
·2getters：
可以认为是 store 的计算属性, getters 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算
getters：{
    updateTodos：state =>{
        return this.$store.state.todos
    }
}
`3mutations（提交更改数据的方法，同步！!!必须是同步函数）
Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。
这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：
eg:
cosnt store= new Vuex.Store({
    store:{
        count:0,
    }
    mutations:{
        increment:(state,n)=>{
         return state.count+=n;
     }
    }
}}
//使用
store.commit({
    type:'increment',
    amount:10
})

`4actions（像一个装饰器，包裹mutations，使之可以异步。）
action的功能和mutation是类似的，都是去变更store里的state，不过action和mutation有两点不同：
1）action主要处理的是异步的操作，mutation必须同步执行，而action就不受这样的限制，
也就是说 action中我们既可以处理同步，也可以处理异步的操作
2）action改变状态，最后是通过提交mutation

`5modules （ 模块化Vuex）
在Vue中State使用是单一状态树结构，应该的所有的状态都放在state里面，如果项目比较复杂，
那state是一个很大的对象，store对象也将对变得非常大，难于管理。
modules：可以让每一个模块拥有自己的state、mutation、action、getters,使得结构非常清晰，方便管理

const moduleA={
    state:{},
    mutation:{},
    getters:{},
    actions:{}
}
const moduleB={
    state:{},
    mutation:{},
    getters:{},
    actions:{}
}

const store=new Vuex.Store({
    modules:{
        a:moduleA,
        b:moduleB
    }
})
store.state.a //a的状态




6.setTimeout
setTimeout( ) 是属于 window 的 method, 但我们都是略去 window 这顶层物件名称, 
这是用来设定一个时间, 时间到了, 就会执行一个指定的 method。   



7.Promise中resolve和reject参数
参数只有一个 resolve(value) 
resolve(a,b,c) b,c参数会被忽略掉，解决：用数组的方式来传递 resolve([a,b,c]) resolve出来的结果也是数组



8.vue生命周期
见vue学习中的生命周期例子



9.关于$mount() 手动挂载
如果没有挂载，就没有关联的DOM元素，就获取不到$el
挂载的几种方式
var MyComponent = Vue.extend({
  template: '<div>Hello!</div>'
})

// create and mount to #app (will replace #app)
new MyComponent().$mount('#app')

// the above is the same as:
new MyComponent({ el: '#app' })

// or, render off-document and append afterwards:
var component = new MyComponent().$mount()
document.getElementById('app').appendChild(component.$el)




10.$ref $el
ref被用来给元素或子组件注册引用信息，引用信息会注册在父组件的$refs上,ref的3中用法：

.1.ref加在普通元素上，this.#refs.name 获取到dom元素
<div id="app">
<input ref="count" type="text" v-model="active.name" required name="name" value="">
</div>
this.$refs.count  =>获取input节点，可对其进行一些dom操作

.2.ref加载子组件上，用this.$refs.name 获取到组件实例，可以使用组件的所有方法
<div id="app">
    <hdnews ref="hdnews"></hdnews>
</div>
假设hdnews中有new方法 通过 this.$refs.hdnews.new 可调用

.3.利用v-for和ref来获取一组数组或者DOM节点
如果通过v-for 遍历想加不同的ref时记得加 :号，即 :ref =某变量 ;
这点和其他属性一样，如果是固定值就不需要加 :号，如果是变量记得加 :号。（加冒号的，说明后面的是一个变量或者表达式；没加冒号的后面就是对应的字符串常量（String）

`ref 需要在dom渲染完成后才会有，在使用的时候确保dom已经渲染完成。比如在生命周期 mounted(){} 钩子中调用，或者在 this.$nextTick(()=>{}) 中调用。
`如果ref 是循环出来的，有多个重名，那么ref的值会是一个数组 ，此时要拿到单个的ref 只需要循环就可以了。



下面用这个例子来解释：$el $data $options
var app   = new Vue({    
        el:"#container",    
        data:{    
                msg:"hello,2020!"    
        },    
        address:"长安西路"    
})    

el与$el:
el是Vue实例的挂载目标。在实例挂载后！！！，元素可以用vm.$el访问。
在挂载阶段未开始之前$el属性不可见。Vue生命周期mounted阶段，el被新创建的vm.$el替换，此时Vue实例的挂载目标确定，DOM渲染完成。可通过vm.$el来访问el
$el:
获取Vue实例关联的DOM元素

比如：对于用$refs无法直接拿到DOM的时候（上述.2的情况就拿不到），就要用到$el
app.$el 返回id为container的DOM元素
$data:
获取Vue实例的data选项（对象）
app.$data 返回对象 msg:"hello,2020!"  }

$options
获取自定义属性
app.$options.address //长安西路



11.git拉项目到vscode步骤
 .1打开新终端
 .2输入 git clone git地址
 .3 执行npm init命令
创建package.json文件，系统会提示相关配置，也可以使用命令 npm init -y 自动创建必填项执行完命令后可以看到用户路径下多了一个package.json文件。
（package.js里的scripts确实没有dev，这种情况 
输入vue init webpack  将package.json中丢失的重新下载）
.4 执行命令 npm install 安装依赖
.5 执行命令 npm run dev
